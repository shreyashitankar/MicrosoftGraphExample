/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package graphtutorial;
import com.microsoft.graph.models.extensions.User;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.io.IOException;
import java.util.Properties;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.List;
import com.microsoft.graph.models.extensions.DateTimeTimeZone;
import com.microsoft.graph.models.extensions.Event;
import com.microsoft.graph.models.extensions.Message;
import com.microsoft.graph.models.extensions.User;
import com.google.gson.JsonObject;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.Serializable;
import java.io.File; 
import java.io.FileOutputStream;

public class App  implements Serializable  {
     public static void main(String[] args) {
        System.out.println("Java Graph Tutorial");
        System.out.println();
        // Load OAuth settings
final Properties oAuthProperties = new Properties();

try {
    oAuthProperties.load(App.class.getResourceAsStream("oAuth.properties"));
    
} catch (IOException e) {
    System.out.println("Unable to read OAuth configuration. Make sure you have a properly formatted oAuth.properties file. See README for details.");
    return;
}

final String appId = oAuthProperties.getProperty("app.id");
final String[] appScopes = oAuthProperties.getProperty("app.scopes").split(",");
// Get an access token
Authentication.initialize(appId);
final String accessToken = Authentication.getUserAccessToken(appScopes);
// Greet the user
List<User> user = Graph.getUser(accessToken);
for(User usr : user) {
	System.out.println("Welcome " + usr.displayName);
}

System.out.println();


        Scanner input = new Scanner(System.in);

        int choice = -1;

        while (choice != 0) {
            System.out.println("Please choose one of the following options:");
            System.out.println("0. Exit");
            System.out.println("1. Display access token");
            System.out.println("2. List mails message and download");
            System.out.println("3. me?");

            try {
                choice = input.nextInt();
            } catch (InputMismatchException ex) {
                // Skip over non-integer input
                input.nextLine();
            }

            // Process user choice
            switch(choice) {
                case 0:
                    // Exit the program
                    System.out.println("Goodbye...");
                    break;
                case 1:
                    // Display access token
                    System.out.println("Access token: " + accessToken);
                    break;
                case 2:
                    // List the calendar
                    downloadMails(accessToken);
                    break;
                case 3:
                	for(User usr : user) {
                		System.out.println("Welcome " + usr.displayName);
                	}
                    break;
                default:
                    System.out.println("Invalid choice");
                
            }
        }

        input.close();
    }
    private static String formatDateTimeTimeZone(DateTimeTimeZone date) {
        LocalDateTime dateTime = LocalDateTime.parse(date.dateTime);
    
        return dateTime.format(
            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)) +
            " (" + date.timeZone + ")";
    }
    private static void downloadMails(String accessToken){
        // Get the user's events
        List<Message> events = Graph.getEvents(accessToken);
        
    
        System.out.println("Events:");
    
        for (Message event : events) {
            System.out.println("Subject: " + event.subject);
            System.out.println("  Name: " + event.sender.emailAddress.name);
            System.out.println("  Body: " + event.body.content);
            System.out.println("Message id:"+ event.id);
            String messageId = event.id;
            List<User> user = Graph.getUser(accessToken);
            for(User usr : user) {
            String userid = usr.id;
            Graph.returnmime(messageId, accessToken, userid);           
            }
        }
    
        
    }
}
